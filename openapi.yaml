openapi: '3.0.2'
info:
  title: GainTracker
  version: '1.0'
  description: |-
    Application to record results in your training sessions.
  termsOfService: http://swagger.io/terms/
  contact:
    email: gaintrackerteam@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://gaintracker
tags:
  - name: general
  - name: user
  - name: workout
    description: Workout - set of exercises
  - name: session
    description: Particular session, where you used workout and recorded results.

paths:
  /about:
    get:
      tags:
        - general
      summary: Homepage
      description: ''
      operationId: getHomepage
      responses:
        '200':
          description: Success 
    
  /user/signup:
    post:
      tags:
        - user
      summary: Create user
      description: Create a new account
      operationId: createUser
      requestBody:
        description: Create user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userCreation'
        required: true
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
  /user/login:
    get:
      tags: 
        - user
      summary: Log in
      description: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The username for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/logout:
    get:
      tags:
        - user
      summary: Log out
      description: Logs out current logged in user
      operationId: logoutUser
      responses:
        '200':
          description: Successfully logged out.
        '401':
          $ref: '#/components/responses/Unauthorized'
  /user/progress/measurements/add:
    post:
      tags:
        - user
      summary: Record your bodyparts
      description: Make new measurement record
      operationId: addMeasurements
      requestBody:
        description: Make measurement record
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/measurementsCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/measurementsList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/progress/measurements:
    get:
      tags:
        - user
      summary: Get user info and body measurements
      description: ''
      operationId: getUserMeasurementsInfo
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAndMeasurementsInfo' 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/progress/exercises:
    get:
      tags:
        - user
      summary: Get user info and progress in exercises
      description: ''
      operationId: getUserExercisesInfo
      parameters:
        - name: Exercise Name
          in: query
          required: false
          schema:
            type: string
            example: 'Push ups'
            default: 'None'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAndExerciseInfo' 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /user/progress/muscles:
    get:
      tags:
        - user
      summary: Get user info and progress in muscle groups
      description: ''
      operationId: getUserMusclesInfo
      parameters:
        - name: Muscle Name
          in: query
          required: false
          schema:
            type: string
            example: 'Chest'
            default: 'None'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAndMuscleInfo' 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /workouts:
    get:
      tags:
        - workout
      summary: Get all workouts
      description: ''
      operationId: getWorkoutsList
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/workoutInfo'    

        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /workouts/add:
    get:
      tags:
        - workout
      summary: Get all exercises, which can be used in a new workout
      description: ''
      operationId: getExercisesList
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/exerciseInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - workout
      summary: Create new workout
      description: ''
      operationId: createWorkout
      requestBody:
        description: Create workout
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/workoutCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workoutInfo'    
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /workouts/{id}:
    get:
      tags:
        - workout
      summary: Get workout by id
      description: ''
      operationId: getWorkoutInfo
      parameters: 
        - name: id
          in: path
          description: Workout id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workoutInfo' 
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - workout
      summary: Delete workout
      description: ''
      operationId: deleteWorkout
      parameters: 
        - name: id
          in: path
          description: Workout id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Deleted successsfully...     
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /sessions:
    get:
      tags:
        - session
      summary: Get a list of sessions
      description: Get sessions' workout name and date, show it as a list
      operationId: getSessionsList
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/sessionInfoForList'    
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /sessions/{id}:
    get:
      tags:
        - session
      summary: Get session info
      description: Get session's workout name, exercises and exercise records
      operationId: getSessionInfo
      parameters: 
        - name: id
          in: path
          description: Session id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sessionFullInfo' 
                  
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /sessions/add:
    get:
      tags:
        - session
      summary: Get interface for entering records for creating a session
      description: Create new session, using already existing workout
      operationId: getExercisesForSession
      parameters: 
        - name: id
          in: query
          description: Workout id, that is passed to query when user clicks `Create session` in `/workout/{id}`
          schema:
            type: string
          required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/workoutInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - session
      summary: Create new session
      description: ''
      operationId: createSession
      requestBody:
        description: Create session
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sessionCreation'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sessionFullInfo'    
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    userCreation: 
      type: object
      properties:
        username:
          type: string
          example: batiukmaks3000
        email:
          type: string
          example: killer5000@gmail.com
        password:
          type: string
          example: str0ng_Passw0ord
        first_name:
          type: string
          example: Maksym
        last_name:
          type: string
          example: Batiuk
        sex: 
          type: string
          example: male
          enum:
            - male
            - female
        birthday:
          type: string
          format: date
    userInfo: 
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 13
        username:
          type: string
          example: batiukmaks3000
        email:
          type: string
          example: killer5000@gmail.com
        first_name:
          type: string
          example: Maksym
        last_name:
          type: string
          example: Batiuk
        sex: 
          type: string
          example: male
          enum:
            - male
            - female
        birthday:
          type: string
          format: date
    measurementsCreation:
      type: object
      properties:
        weight:
          type: number
          format: float
          example: 63.4
          default: -1
        chest:
          type: number
          format: float
          example: 83.6
          default: -1
        waist:
          type: number
          format: float
          example: 45.3
          default: -1
        hips:
          type: number
          format: float
          example: 19.8
          default: -1
    measurementsList:
      type: object
      properties:
        weight:
          type: array
          items:
            $ref: '#/components/schemas/measurementInfo'
        waist:
          type: array
          items:
            $ref: '#/components/schemas/measurementInfo'
        hips:
          type: array
          items:
            $ref: '#/components/schemas/measurementInfo'
        chest:
          type: array
          items:
            $ref: '#/components/schemas/measurementInfo'
    measurementInfo:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 13
        name: 
          type: string
          example: waist
          enum:
            - weight
            - waist 
            - hips
            - chest
        record: 
          type: number
          format: float
          example: 53.2
        date: 
          type: string
          format: date
    userAndMeasurementsInfo:
      allOf:
        - $ref: '#/components/schemas/userInfo'
        - $ref: '#/components/schemas/measurementsList'
    userAndExerciseInfo:
      allOf:
        - $ref: '#/components/schemas/userInfo'
        - type: object
          properties:
            exercise_name:
              type: string
              example: push ups
            graph:
              $ref: '#/components/schemas/graph'
            records:
              type: array
              items:
                $ref: '#/components/schemas/recordInfo'
    userAndMuscleInfo:
      allOf:
        - $ref: '#/components/schemas/userInfo'
        - type: object
          properties:
            muscle_name:
              type: string
              example: chest
            graph:
              $ref: '#/components/schemas/graph'
                
    workoutInfo: 
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 13
        name:
          type: string
          example: Upper Body
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/exerciseInfo'
    workoutCreation: 
      type: object
      properties:
        name:
          type: string
          example: Upper Body
        exercises:
          type: array
          items:
            type: integer
    exerciseInfo: 
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 13
        name:
          type: string
          example: push ups
        equipment:
          type: string
          example: required
          enum:
            - required
            - not required
        type:
          type: string
          example: endurance
          enum:
            - endurance
            - strength
            - balance
            - flexibility
        muscles:
          type: array
          items:
            type: string
            example: chest
            enum:
              - chest
              - arms
              - legs
              - back
              - core
              - booty
        description:
          type: string
          example: Pushups are an exercise in which a person, keeping a prone position, with the hands palms down under the shoulders, the balls of the feet on the ground, and the back straight, pushes the body up and lets it down by an alternate straightening and bending of the arms.
          
    sessionFullInfo: 
      allOf:
        - $ref: '#/components/schemas/sessionInfoForList'
        - type: object
          properties:
            records:
              type: array
              items:
                $ref: '#/components/schemas/recordInfo'
    sessionInfoForList: 
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 13
        date:
          type: string
          format: date
          example: 01-03-2004
        workout_id:
          type: integer
        workout_name:
          type: string
          example: Upper Body
    sessionCreation: 
      type: object
      properties:
        date:
          type: string
          format: date
          example: 01-03-2004
        workout:
          type: integer
        records:
          type: array
          items:
            $ref: '#/components/schemas/recordCreation'
    recordCreation:
      type: object
      properties:
        exercise_id:
          type: integer
        sets:
          type: array
          items:
            type: object
            properties:
              reps:
                type: integer
                example: 15
              time:
                type: number
                format: float
                example: 0.43
              weight:
                type: number
                format: float
                example: 25
    recordInfo:
      allOf:
        - type: object
          properties:
            id: 
              type: integer
            date: 
              type: string
              format: date
        - $ref: '#/components/schemas/recordCreation'
    graph:
      type: array
      items:
        type: object
        properties:
          value:
            type: number
            format: float
            example: 12.7
          date:
            type: string
            format: date
            example: 01-03-2004
    error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    
  responses:
    BadRequest:
      description: Invalid input.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    Unauthorized:
      description: Unauthorized user.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    Forbidden:
      description: The user does not have the necessary permissions for the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    NotFound:
      description: The resourse is not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'